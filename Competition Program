//INTERRUPTS
#include <TimerThree.h>
#include <Wire.h>

// Thermocouple libararies
#include <OneWire.h>
#include <DallasTemperature.h>

// 7 Seg libararies
#include <Adafruit_GFX.h>
#include "Adafruit_LEDBackpack.h"

// Interrupts can be used on pins 2, 3, 18, 19, 20, 21 of the MEGA

//TACHOMETER
const int analogPinTach = A0; // INPUT from inductive rpm sensor
#define shiftDataTach 2  // OUTPUT to tach shift register data pin
#define shiftLatchTach 3 // OUTPUT to tach shift register latch
#define shiftClkTach 4 // OUTPUT to tach shift register clk pin 

byte rpmCount;
byte tachState;
int rpm;
int rpmArray [5];
byte rpmArrayPointer;

// FUEL
#define shiftDataFuel 5 // OUTPUT to tach shift register data pin
#define shiftLatchFuel 6 // OUTPUT to tach shift register latch
#define shiftClkFuel 7 // OUTPUT to tach shift register clk pin 
byte fuelLevel;

// TEMPERATURE: Data: 18
#define ONE_WIRE_BUS 18 // INPUT from data bus for DS18B20 thermcouple
int fahrenheit;
byte tempSwitch;
OneWire oneWire(ONE_WIRE_BUS);
DallasTemperature sensors(&oneWire); 

// TIMER
const byte refreshCycle = 100;
byte minutes;
byte seconds;

// SPEEDOMETER
#define hallEffectPin 19
byte rotationCount;
byte wheelSpeed = 0;
byte refreshCycleCount;

// BUTTON
#define buttonPin 8
byte displayState;
byte buttonSwitch;
byte buttonState;
unsigned int b;
byte t;

// 7 Segment Displays
Adafruit_7segment matrix1 = Adafruit_7segment();
Adafruit_7segment matrix2 = Adafruit_7segment();

// FUNCTION PROTOTYPES    
void updateDAQ(void);
void pollRpm(void);
void setupSD(void);
void findRunTime(void);
void findRpm(void);
int encodeRpm(int rpmToBeEncoded);
int encodeFuel(int minutes);
void findTemperature(void);
void writeDisplays(void);
void writeMultiDisplay(void);
void incrementRotationCount(void);
void findSpeed(void);

void setup() {
  Serial.begin(9600);
  
  pinMode(analogPinTach, INPUT);

  pinMode(buttonPin, INPUT);
  
  pinMode(shiftDataTach, OUTPUT);
  pinMode(shiftClkTach, OUTPUT);
  pinMode(shiftLatchTach, OUTPUT);

  pinMode(shiftDataFuel, OUTPUT);
  pinMode(shiftClkFuel, OUTPUT);
  pinMode(shiftLatchFuel, OUTPUT);
  
  matrix1.begin(0x70);
  matrix2.begin(0x71);
  
  matrix1.setBrightness(5);
  matrix2.setBrightness(5);
  
  sensors.begin();

  // INIT HALL-EFFECT
  attachInterrupt(digitalPinToInterrupt(hallEffectPin), incrementRotationCount, FALLING);
}

void loop(){
  pollRpm();
  readMultiButton();
  
  if ((millis() % refreshCycle) == 0){
    updateDAQ();
  }
}

void updateDAQ(void){
  findRunTime();

  findRpm();

  findSpeed();

  fuelLevel = findFuelLevel(minutes);

  findTemperature();

  writeDisplays();
}

void findRunTime(void){
  if ((millis() % 1000) == 0){
    seconds++;
  }
  if (((seconds % 60) == 0) && (seconds != 0)){
    minutes++;
    seconds = 0;
  }
}

void pollRpm(void){
  int analogTachVoltage = analogRead(analogPinTach);
  if (analogTachVoltage > 15 && tachState == 0) {
    rpmCount++;
    tachState = 1;
  }
  else if (analogTachVoltage > 15 && tachState == 1) {tachState = 1;}
  else if (analogTachVoltage < 15) {tachState = 0;}
}

void findRpm(void){  
  int newRpm;
  if (rpmArrayPointer < 5){
    rpmArray[rpmArrayPointer] = rpmCount;
    rpmArrayPointer++;
    if (rpmArrayPointer >= 5){rpmArrayPointer = 0;}
  }
  for (int i = 0; i < 5; i++){newRpm += rpmArray[i];}
  newRpm = newRpm * 120;
  rpm = min(4000, newRpm);  // Max RPM is 4000
  rpmCount = 0;
}

int encodeRpm(int rpmToBeEncoded){
  int encodedRpm = 0b00000000;
  if (rpmToBeEncoded <= 100){                                return encodedRpm = 0b00000000;}
  else if (rpmToBeEncoded > 100 && rpmToBeEncoded < 500){    return encodedRpm = 0b00000001;}
  else if (rpmToBeEncoded >= 500 && rpmToBeEncoded < 1000){  return encodedRpm = 0b00000011;}
  else if (rpmToBeEncoded >= 1000 && rpmToBeEncoded < 1500){ return encodedRpm = 0b00000111;}
  else if (rpmToBeEncoded >= 1500 && rpmToBeEncoded < 2000){ return encodedRpm = 0b00001111;}
  else if (rpmToBeEncoded >= 2000 && rpmToBeEncoded < 2500){ return encodedRpm = 0b00011111;}
  else if (rpmToBeEncoded >= 2500 && rpmToBeEncoded < 3000){ return encodedRpm = 0b00111111;}
  else if (rpmToBeEncoded >= 3000 && rpmToBeEncoded < 3500){ return encodedRpm = 0b01111111;}
  else if (rpmToBeEncoded >= 3500 && rpmToBeEncoded < 4000){ return encodedRpm = 0b11111111;}
}

int findFuelLevel(int minutes){
  fuelLevel = map(minutes, 0, 60, 0, 100);
}

int encodeFuel(int fuelLevel){
  int encodedFuel = 0b00000000;
  if (fuelLevel <= 15){                        return encodedFuel = 0b00001111;}
  else if (fuelLevel > 15 && fuelLevel < 30){  return encodedFuel = 0b00000111;}
  else if (fuelLevel >= 30 && fuelLevel < 45){ return encodedFuel = 0b00000011;}
  else if (fuelLevel >= 45 && fuelLevel < 50){ return encodedFuel = 0b00000001;}
}

void incrementRotationCount(){
  rotationCount++;
}

void findSpeed(){
if (rotationCount > 0){
    wheelSpeed = (int) (rotationCount * 0.0022 * (1/(refreshCycleCount * 0.1)) * 3600); // 3600 = mps to mph, 0.0022 = circumference of wheel in miles
    refreshCycleCount = 0;
    rotationCount = 0;
  }
  else{
    refreshCycleCount++;
    wheelSpeed = 0;
  }
}

void findTemperature(){
  // Find temperatures
  int celcius;
  int tempFahrenheit;
  sensors.requestTemperatures();
  celcius=sensors.getTempCByIndex(0);
  tempFahrenheit = sensors.toFahrenheit(celcius);
  if (tempSwitch == 0){
    fahrenheit = tempFahrenheit;
    tempSwitch = 1;
  }
  else if (tempSwitch == 1){
    if (abs(tempFahrenheit) - abs(fahrenheit) > 30){
      fahrenheit = fahrenheit;
    }
    else{
      fahrenheit = tempFahrenheit;
    }
  }
}

void readMultiButton(void){
  byte buttonState = digitalRead(buttonPin);
  if(buttonState == 1 && buttonSwitch == 0){
    b++;
  }
  if(buttonState == 0 && buttonSwitch == 0){
    if(b > 10 && b < 1000){
      displayState++;
      t=0;
    }
    else if(b >= 1000){
      seconds = 0;
      minutes = 0;
    }
    b = 0;
    buttonSwitch = 1;
  }
  else if(buttonState == 1){
    buttonSwitch = 0;
  }
}

void writeDisplays(void){
  writeMultiDisplay();

  matrix1.print(minutes * 100 + seconds, DEC);
  matrix1.drawColon(true);
  matrix1.writeDisplay();

  int encodedRpm = encodeRpm(rpm);
  int encodedFuel = encodeFuel(fuelLevel);

  digitalWrite(shiftLatchTach, LOW);
  shiftOut(shiftDataTach, shiftClkTach, MSBFIRST, encodedRpm);
  digitalWrite(shiftLatchTach, HIGH);
  
  digitalWrite(shiftLatchFuel, LOW);
  shiftOut(shiftDataFuel, shiftClkFuel, MSBFIRST, encodedFuel);
  digitalWrite(shiftLatchFuel, HIGH);
}

void writeMultiDisplay(void){
    if (displayState == 0){
    if (t < 10){
      matrix2.writeDigitRaw(1, 0b00111111);
      matrix2.writeDigitRaw(3, 0b01110001);
      matrix2.writeDigitRaw(4, 0b01110001);
      matrix2.writeDisplay();
      t++;
    }
    else{
      matrix2.writeDigitRaw(0, 0b00000000);
      matrix2.writeDigitRaw(1, 0b00000000);
      matrix2.writeDigitRaw(3, 0b00000000);
      matrix2.writeDigitRaw(4, 0b00000000);
      matrix2.writeDisplay();
    }
  }
  
  else if (displayState == 1){
    if (t < 10){
      matrix2.writeDigitRaw(1, 0b01101101);
      matrix2.writeDigitRaw(3, 0b01110011);
      matrix2.writeDigitRaw(4, 0b01011110);
      matrix2.writeDisplay();
      t++;
    }
    else{
      matrix2.print(wheelSpeed);
      matrix2.writeDisplay();
    }
  }
    
  else if (displayState == 2){
    if (t < 10){
      matrix2.writeDigitRaw(1, 0b01011110);
      matrix2.writeDigitRaw(3, 0b01111001);
      matrix2.writeDigitRaw(4, 0b01101111);
      matrix2.writeDisplay();
      t++;
    }
    else{
      matrix2.print(fahrenheit);
      matrix2.writeDisplay();
    }
  }
  
  else if (displayState == 3){
    if (t < 10){
      matrix2.writeDigitRaw(1, 0b00110001);
      matrix2.writeDigitRaw(3, 0b01111001);
      matrix2.writeDigitRaw(4, 0b00111110);
      matrix2.writeDisplay();
      t++;
    }
    else{
      matrix2.print(rpm);
      matrix2.writeDisplay();
    }
  }
  else if (displayState > 3 || displayState < 1){
    displayState = 0;
  }
}
